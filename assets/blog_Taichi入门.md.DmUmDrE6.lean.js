import{_ as s,c as a,a2 as h,o as t}from"./chunks/framework.BQmytedh.js";const o=JSON.parse('{"title":"Taichi入门","description":"","frontmatter":{},"headers":[],"relativePath":"blog/Taichi入门.md","filePath":"blog/Taichi入门.md"}'),n={name:"blog/Taichi入门.md"};function e(p,i,l,k,d,r){return t(),a("div",null,i[0]||(i[0]=[h(`<h1 id="taichi入门" tabindex="-1">Taichi入门 <a class="header-anchor" href="#taichi入门" aria-label="Permalink to &quot;Taichi入门&quot;">​</a></h1><p>???+ note &quot;前言&quot; Taichi 是一个基于 Python 的领域特定语言，专为高性能并行计算设计。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> taichi</span></span></code></pre></div><h2 id="在pycharm中新建一个pycharm项目" tabindex="-1">在pycharm中新建一个Pycharm项目 <a class="header-anchor" href="#在pycharm中新建一个pycharm项目" aria-label="Permalink to &quot;在pycharm中新建一个Pycharm项目&quot;">​</a></h2><p>![](1 copy.png) ???+ note &quot;注意&quot; 这里选择 <code>python Interpreter</code> 时需要选择<code>python</code>的默认安装目录中的<code>python.exe</code>,不然会导致已经下载的第三方库（比如taichi）在pycharm中无法使用</p><h2 id="开始写taichi代码" tabindex="-1">开始写Taichi代码 <a class="header-anchor" href="#开始写taichi代码" aria-label="Permalink to &quot;开始写Taichi代码&quot;">​</a></h2><p><code>taichi</code>本来是用来做计算机图形学的内容，由于笔者目前对计算机图形学并不太了解，这里简单演示一下如何用<code>taichi</code>来绘制一条直线</p><h3 id="导入taichi模块" tabindex="-1">导入taichi模块 <a class="header-anchor" href="#导入taichi模块" aria-label="Permalink to &quot;导入taichi模块&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> taichi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ti</span></span></code></pre></div><h3 id="初始化taichi" tabindex="-1">初始化taichi <a class="header-anchor" href="#初始化taichi" aria-label="Permalink to &quot;初始化taichi&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ti.init(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ti.gpu)</span></span></code></pre></div><p>此行调用 <code>ti.init()</code>，根据传入参数定制 Taichi 运行时。 目前，我们只介绍最重要的参数：<code>arch</code>。</p><p>参数 <code>arch</code> 指定<strong>后端</strong>来执行已编译的代码。 后端可以是 <code>ti.cpu</code> 或 <code>ti.gpu</code>。 当指定后端为 <code>ti.gpu</code> 时，Taichi 按照 <code>ti.cuda</code>、<code>ti.vulkan</code>、<code>ti.opengl/ti.metal</code> 的优先顺序选择后端。 如果没有 GPU 架构可用，Taichi 回退到 CPU 设备。</p><p>你也可以直接指定要使用的 GPU 后端。 例如，设置 <code>arch=ti.cuda</code>，在 CUDA 上运行程序。 如果目标架构不可用，Taichi 会报错。</p><h3 id="定义一段直线" tabindex="-1">定义一段直线 <a class="header-anchor" href="#定义一段直线" aria-label="Permalink to &quot;定义一段直线&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.random.random((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#x 为起点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.random.random((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#y 为终点</span></span></code></pre></div><h3 id="在taichi提供的图像界面上显示" tabindex="-1">在taichi提供的图像界面上显示 <a class="header-anchor" href="#在taichi提供的图像界面上显示" aria-label="Permalink to &quot;在taichi提供的图像界面上显示&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 560</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gui </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ti.gui(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我的第一个taichi作品&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,n))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gui.lines(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">begin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Y, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">radius</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">068587</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gui.show()</span></span></code></pre></div><p>???+ info &quot;注意&quot; 为了防止图形界面一闪而过，我们还要加入以下代码 <code>python while gui.running: gui.show() </code></p>`,20)]))}const E=s(n,[["render",e]]);export{o as __pageData,E as default};
