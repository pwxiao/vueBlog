import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.B5RDkS33.js";const t="/assets/image-20240323120133672.Cx7VQwkb.png",l="/assets/image-20240323122911630.C-kFcl7z.png",F=JSON.parse('{"title":"Docker学习","description":"","frontmatter":{},"headers":[],"relativePath":"blog/learnDocker.md","filePath":"blog/learnDocker.md"}'),n={name:"blog/learnDocker.md"},h=e(`<h1 id="docker学习" tabindex="-1">Docker学习 <a class="header-anchor" href="#docker学习" aria-label="Permalink to &quot;Docker学习&quot;">​</a></h1><p>Docker包括三个基本概念</p><ul><li>镜像（Image），可以看作一个root的文件系统</li><li>容器 （Container），跟镜像的关系，可以理解为面向对编程中类和实例的关系，镜像式静态的，可容器是运行的，动态的</li><li>仓库（Repository）。可以理解为代码管理系统</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2016/04/576507-docker1.png" alt="img"></p><p>Docker使用客户端-服务端（C/S）模式，可以用通过远程api来创建和管理Docker容器</p><h2 id="docker安装-ubuntu" tabindex="-1">Docker安装（Ubuntu） <a class="header-anchor" href="#docker安装-ubuntu" aria-label="Permalink to &quot;Docker安装（Ubuntu）&quot;">​</a></h2><h3 id="官方脚本" tabindex="-1">官方脚本 <a class="header-anchor" href="#官方脚本" aria-label="Permalink to &quot;官方脚本&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://test.docker.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-docker.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-docker.sh</span></span></code></pre></div><h3 id="卸载docker" tabindex="-1">卸载Docker <a class="header-anchor" href="#卸载docker" aria-label="Permalink to &quot;卸载Docker&quot;">​</a></h3><p>删除安装包</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo apt-get purge docker-e</span></span></code></pre></div><p>删除镜像，容器，配置文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo rm -rf /var/lib/docker</span></span></code></pre></div><h3 id="docker-helloo-world" tabindex="-1">Docker Helloo,world <a class="header-anchor" href="#docker-helloo-world" aria-label="Permalink to &quot;Docker Helloo,world&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run ubuntu:15.10 /bin/echo &quot;Hello world&quot;</span></span></code></pre></div><p>各个参数解析：</p><ul><li><strong>docker:</strong> Docker 的二进制执行文件。</li><li><strong>run:</strong> 与前面的 docker 组合来运行一个容器。</li><li><strong>ubuntu:15.10</strong> 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li><li><strong>/bin/echo &quot;Hello world&quot;:</strong> 在启动的容器里执行的命令</li></ul><h3 id="运行交互式容器" tabindex="-1">运行交互式容器 <a class="header-anchor" href="#运行交互式容器" aria-label="Permalink to &quot;运行交互式容器&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run -i -t ubuntu:15.10 /bin/bash</span></span></code></pre></div><p>查看容器环境版本</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> proc/version</span></span></code></pre></div><p>退出虚拟环境</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span></span></code></pre></div><h3 id="后台运行" tabindex="-1">后台运行 <a class="header-anchor" href="#后台运行" aria-label="Permalink to &quot;后台运行&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run  -d ubuntu:15.10 /bin/sh -c &quot;while true; do echo hello,world;sleep 1;done&quot;</span></span></code></pre></div><h3 id="查看后台运行" tabindex="-1">查看后台运行 <a class="header-anchor" href="#查看后台运行" aria-label="Permalink to &quot;查看后台运行&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span></code></pre></div><p><img src="`+t+`" alt="image-20240323120133672"></p><p>输出详情介绍：</p><p><strong>CONTAINER ID:</strong> 容器 ID。</p><p><strong>IMAGE:</strong> 使用的镜像。</p><p><strong>COMMAND:</strong> 启动容器时运行的命令。</p><p><strong>CREATED:</strong> 容器的创建时间。</p><p><strong>STATUS:</strong> 容器状态。</p><p>状态有7种：</p><ul><li>created（已创建）</li><li>restarting（重启中）</li><li>running 或 Up（运行中）</li><li>removing（迁移中）</li><li>paused（暂停）</li><li>exited（停止）</li><li>dead（死亡）</li></ul><p><strong>PORTS:</strong> 容器的端口信息和使用的连接类型（tcp\\udp）。</p><p><strong>NAMES:</strong> 自动分配的容器名称。</p><h3 id="查看运行日志" tabindex="-1">查看运行日志 <a class="header-anchor" href="#查看运行日志" aria-label="Permalink to &quot;查看运行日志&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span></span></code></pre></div><h3 id="停止容器" tabindex="-1">停止容器 <a class="header-anchor" href="#停止容器" aria-label="Permalink to &quot;停止容器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span></span></code></pre></div><p>或</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NAMES</span></span></code></pre></div><h3 id="容器使用" tabindex="-1">容器使用 <a class="header-anchor" href="#容器使用" aria-label="Permalink to &quot;容器使用&quot;">​</a></h3><h4 id="获取镜像" tabindex="-1">获取镜像 <a class="header-anchor" href="#获取镜像" aria-label="Permalink to &quot;获取镜像&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span></span></code></pre></div><h4 id="启动容器" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器" aria-label="Permalink to &quot;启动容器&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span></code></pre></div><h3 id="进入容器" tabindex="-1">进入容器 <a class="header-anchor" href="#进入容器" aria-label="Permalink to &quot;进入容器&quot;">​</a></h3><p>在使用 <strong>-d</strong> 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p><ul><li><strong>docker attach</strong></li><li><strong>docker exec</strong>：最好使用 docker exec 命令，因为此命令会退出容器终端，但不会导致容器的停止。</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span></code></pre></div><h3 id="导出和导入容器" tabindex="-1">导出和导入容器 <a class="header-anchor" href="#导出和导入容器" aria-label="Permalink to &quot;导出和导入容器&quot;">​</a></h3><h4 id="导出容器" tabindex="-1">导出容器 <a class="header-anchor" href="#导出容器" aria-label="Permalink to &quot;导出容器&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu.tar</span></span></code></pre></div><h4 id="导入容器" tabindex="-1">导入容器 <a class="header-anchor" href="#导入容器" aria-label="Permalink to &quot;导入容器&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker/ubuntu.tar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test/ubuntu:v1</span></span></code></pre></div><p><strong>详细解释：</strong></p><ol><li><code>cat docker/ubuntu.tar</code>： <ul><li><code>cat</code> 是Linux命令，用于连接并打印文件内容到标准输出（stdout）。在这里，它读取并输出<code>docker/ubuntu.tar</code>文件的内容。</li></ul></li><li><code>|</code>（管道符）： <ul><li>它将<code>cat</code>命令的输出传递给下一个命令作为输入，也就是管道操作符将tar文件内容流式传输至下一条命令。</li></ul></li><li><code>docker import - test/ubuntu:v1</code>： <ul><li><code>docker import</code> 是Docker CLI命令，用于从tar归档文件中导入一个镜像。</li><li><code>-</code> 表示标准输入（stdin），在此情境中意味着接受上一步<code>cat</code>命令输出的tar文件内容作为输入。</li><li><code>test/ubuntu:v1</code> 是新镜像的命名规范，其中<code>test</code>是镜像仓库名，<code>ubuntu</code>是镜像名称，<code>:v1</code>则是镜像标签。这意味着导入后的镜像将被注册为<code>test</code>仓库下的<code>ubuntu</code>镜像，并打上标签<code>v1</code>。</li></ul></li></ol><h3 id="删除容器" tabindex="-1">删除容器 <a class="header-anchor" href="#删除容器" aria-label="Permalink to &quot;删除容器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span></span></code></pre></div><h3 id="运行一个web应用" tabindex="-1">运行一个web应用 <a class="header-anchor" href="#运行一个web应用" aria-label="Permalink to &quot;运行一个web应用&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> training/webapp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> traning/webapp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.py</span></span></code></pre></div><p><img src="`+l+'" alt="image-20240323122911630"></p><p>指定某一端口映射，可使用-p参数</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dockr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5001</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:5000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> training/webapp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.py</span></span></code></pre></div><p>快捷查看某一容器运行的端口</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker port id</span></span></code></pre></div><h3 id="查看本机docker镜像" tabindex="-1">查看本机docker镜像 <a class="header-anchor" href="#查看本机docker镜像" aria-label="Permalink to &quot;查看本机docker镜像&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span></code></pre></div><h2 id="docker上传镜像" tabindex="-1">Docker上传镜像 <a class="header-anchor" href="#docker上传镜像" aria-label="Permalink to &quot;Docker上传镜像&quot;">​</a></h2><p>登录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker login</span></span></code></pre></div><p>打tag</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker tag moviemash qiaobusi/moviemash:tag</span></span></code></pre></div><p>上传</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker push qiaobusi/moviemash:tag</span></span></code></pre></div>',78),p=[h];function o(d,r,c,k,g,u){return i(),a("div",null,p)}const C=s(n,[["render",o]]);export{F as __pageData,C as default};
